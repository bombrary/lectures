構造体とは、いくつかの変数をまとめた新しい型である。
意味的なまとまりを新しい型として作れば、プログラムの見通しが良くなることがある。
構造体の宣言は次のように行う。
struct 構造体名 { メンバ宣言 };
メンバ宣言の部分には、通常の変数の宣言のように書く。ここで宣言された変数はメンバと呼ばれる。
構造体の宣言によって、新しい型が作られた。しかしあくまで作られたのは型なので、実体はまだできていない。
構造体を型とした変数を宣言するには、次のように書く。
struct 構造体名 変数名;
構造体によって作られた変数は、その構造体で定義されたメンバを要素として持っている。そのメンバを利用するには、次のように書く。
変数名.メンバ
この記法によって、メンバに値を代入したり、メンバを使って何か計算をしたりできる。
(例)
人間の名前と現在いる座標をメンバとする構造体Humanを宣言しよう。
struct Human{
char name[1000];
int x;
int y;
};
そして、構造体Humanを型とした変数を作ろう。
struct Human a;
名前と座標を入力させるには次のように書く。
scanf("%s%d%d",a.name,&a.x,&a.y);
xとyの原点からのユークリッド距離を求めるには次のように書く。
double d = sqrt(a.x*a.x+a.y*a.y);
ここで、sqrt(x)とはxの平方根を求めることができる関数。math.hをincludeしなければならない。

[typedef]
型に同義語を定義する命令がある。それがtypedefである。長い型を短い名前に変えたいときに便利。
次のように用いる。
typedef 型名 新しい型名前
型名 新しい型名
は、変数宣言と全く同じように書くことを意識しよう(そうしないと、ポインタ型をtypedefするときに意味が分からなくなります)。
(例)
typedef long long ll;
という書式によって、long long型をllとして書けるようになり、名前が短くなってタイプ数が減らせる。
(例)
typedef struct Human Hm;
という書式によって、構造体Human型をHm型として書ける。
構造体に関しては、以下のように宣言とtypedefを織り混ぜて書ける。
typedef struct Human{
char name[1000];
int x;
int y;
} Hm;
