再帰関数という名前の特別な関数がある訳ではなく、ただ関数の中で同じ関数を呼び出す関数をそう呼んでいる。
呼び出される関数の定義は勿論同じだが、実体としての関数はそれぞれ別物であることに注意したい。
再帰関数は再帰構造を持った問題に対して有効。再帰構造とは、「自分自身の中に自分と同じ構造を持ったものがある」ような性質を持つもののこと。
(例)木
再帰関数はその性質から、「同じような処理を繰り返したい」という目的で用いられる。
特に、「大きな問題をより小さな問題に分割して考えていく」ような処理を書くときに、再帰が有効である場合が多い。
繰り返しはループでも書ける。ループで書けるならループのほうが良い。なぜなら、再帰呼び出しは呼び出し処理の分、時間がかかってしまうからである。
しかしループよりも再帰のほうが分かりやすかったり、また書きやすかったりすることがあるので、ここで再帰の基本について覚えてもらいたい。
再帰を書くときの注意点は、再帰呼び出しを書くとき、その関数が思った処理を完璧に行ってくれる関数であるとみなしてよいこと。しかし再帰呼び出しを書ききったら、ちゃんとその関数がどこで帰るのか等の記述をしっかり作ること。
再帰関数は深さをもつ。深さの情報が持てるように、引数を作ったりグローバル変数を作ったりする。
[ループを無理やり再帰で書く]
[フィボナッチ数列]
